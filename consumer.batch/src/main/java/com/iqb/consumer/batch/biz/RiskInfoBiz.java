package com.iqb.consumer.batch.biz;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.alibaba.druid.support.json.JSONUtils;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.iqb.consumer.batch.dao.RiskInfoDao;
import com.iqb.consumer.batch.data.pojo.LocalRiskInfoBean;
import com.iqb.consumer.batch.data.pojo.RiskInfoBean;
import com.iqb.consumer.batch.data.pojo.RiskResultBean;
import com.iqb.consumer.batch.util.HttpsClientUtil;
import com.iqb.etep.common.base.biz.BaseBiz;
import com.iqb.etep.common.utils.JSONUtil;
import com.iqb.etep.common.utils.https.SendHttpsUtil;
import com.iqb.etep.common.utils.https.SimpleHttpUtils;

@SuppressWarnings({"rawtypes"})
@Component
public class RiskInfoBiz extends BaseBiz {

    private static final Logger logger = LoggerFactory.getLogger(RiskInfoBiz.class);
    private static final String UTF_8 = "utf-8";
    private static final String RiskCodeSucc = "10008";

    private static final String RiskCodeRefused = "10009";

    @Resource
    private RiskInfoDao riskInfoDao;

    // 根据手机号获取用户信息
    public RiskInfoBean getRiskInfoByRegId(String regId, String merchType) {
        // 设置数据源为从库
        setDb(0, super.SLAVE);
        return riskInfoDao.getRiskInfoByRegId(regId, merchType);
    }

    /**
     * 
     * Description: 获取需要风控的信息列表
     * 
     * @param
     * @return RiskInfoBean
     * @throws
     * @Author wangxinbang Create Date: 2017年1月17日 下午12:38:05
     */
    public List<RiskResultBean> getRiskResultNeedSendList(RiskResultBean riskResultBean) {
        setDb(0, super.SLAVE);
        return riskInfoDao.getRiskResultInfoList(riskResultBean);
    }

    /**
     * 
     * Description: 获取发往风控需要风控的信息列表
     * 
     * @param
     * @return RiskInfoBean
     * @throws
     * @Author chengzhen Create Date: 2018年3月2日 15:18:18
     */
    public List<RiskResultBean> getRiskResultNeedSendList2(RiskResultBean riskResultBean) {
        setDb(0, super.SLAVE);
        return riskInfoDao.getRiskResultInfoList2(riskResultBean);
    }

    /**
     * 
     * Description: 保存编号到inst_riskresult中
     * 
     * @param
     * @return RiskInfoBean
     * @throws
     * @Author chengzhen Create Date: 2018年3月2日 15:46:53
     */
    public void saveReportNo(LocalRiskInfoBean rrb) {
        setDb(0, super.MASTER);
        riskInfoDao.saveReportNo(rrb);
    }

    /**
     * 
     * Description: 保存风控结果
     * 
     * @param
     * @return RiskInfoBean
     * @throws
     * @Author wangxinbang Create Date: 2017年1月17日 下午12:38:05
     */
    public Integer saveRiskResultInfo(RiskResultBean riskResultBean) {
        setDb(0, super.MASTER);
        return riskInfoDao.saveRiskResultInfo(riskResultBean);
    }

    /**
     * 
     * Description: 更新风控结果
     * 
     * @param
     * @return RiskInfoBean
     * @throws
     * @Author wangxinbang Create Date: 2017年1月17日 下午12:38:05
     */
    public Integer updateRiskResultInfo(RiskResultBean riskResultBean) {
        setDb(0, super.MASTER);
        return riskInfoDao.updateRiskResultInfo(riskResultBean);
    }

    /**
     * 
     * Description: 处理风控结果信息
     * 
     * @param
     * @return Integer
     * @throws
     * @Author wangxinbang Create Date: 2017年1月17日 下午2:26:11
     */
    public Integer dealRiskResultSchedule(Integer reqTimes, String noticeUrl) {
        int i = 0;
        RiskResultBean riskResultBean = new RiskResultBean();
        riskResultBean.setReqTimes(reqTimes);
        /*
         * List<RiskResultBean> riskResultList = this.getRiskResultNeedSendList(riskResultBean);
         * 
         * if (CollectionUtils.isEmpty(riskResultList)) { return 0; }
         * logger.info("查询到数据库中需要调用风控接口的数据:{}", JSONObject.toJSONString(riskResultList));
         * 
         * for (RiskResultBean riskResultBeanE : riskResultList) { try { String result =
         * HttpsClientUtil.getInstance().doPost(riskResultBeanE.getSendUrl(),
         * riskResultBeanE.getContent(), "utf-8");// 调用风控接口发送了短信
         * logger.info("正在处理风控结果，订单号为:{}，风控处理结果为:{}", riskResultBeanE.getOrderId(), result); Map
         * resMap = JSONObject.parseObject(result); // JSONArray resList =
         * JSONObject.parseArray(result); // JSONObject resMap = (JSONObject)
         * JSONObject.parse(resList.getString(0)); String retVal = resMap.get("return") + "";
         * logger.info("调用风控CheckOrder接口返回return码 ： " + retVal); if (RiskCodeSucc.equals(retVal)) {
         * riskResultBeanE.setStatus(1); i++; } else if (RiskCodeRefused.equals(retVal)) {// 拒绝
         * String content = riskResultBeanE.getContent(); riskResultBeanE.setStatus(1); i++; //
         * 风控直接拒绝订单，触发拒单操作 String retStr = "{\"orderId\":\"" + riskResultBeanE.getOrderId() +
         * "\",\"riskStatus\":\"" + 2 + "\",\"message\":\"" + resMap.get("message") +
         * "\",\"messageInfo\":\"" + resMap.get("messageInfo") + "\"}"; // 风控直接拒绝订单，触发拒单操作 try {
         * Map<String, Object> map = JSONObject.parseObject(content); logger.info("回调地址:{}",
         * map.get("noticeUrl")); String returnUrl = map.get("noticeUrl") + ""; if
         * (returnUrl.contains("consumer.manage.front")) { returnUrl =
         * returnUrl.replaceAll("www\\.shandianx\\.com", "127.0.0.1"); returnUrl =
         * returnUrl.replaceAll("www\\.zhongezc\\.com", "127.0.0.1"); returnUrl =
         * returnUrl.replaceAll("api\\.ishandian\\.cn", "127.0.0.1"); } logger.info("回调地址:{}",
         * returnUrl); // 调用https失败的情况 SendHttpsUtil.postMsg4GetMap(returnUrl, retStr); } catch
         * (Exception e) { logger.error("订单:{}风控秒拒", riskResultBeanE.getOrderId(), e);
         * HttpsClientUtil.getInstance().doPost2(noticeUrl, retStr, UTF_8); }
         * 
         * } } catch (Exception e) { riskResultBeanE.setStatus(2); logger.error("调用读脉出现异常：" +
         * e.getMessage()); } setDb(0, super.MASTER);
         * riskInfoDao.updateRiskResultInfo(riskResultBeanE); }
         */
        this.send2LocalFeng(riskResultBean);
        return i;
    }

    public void send2LocalFeng(RiskResultBean riskResultBean) {
        // 发风控
        List<RiskResultBean> riskResultListTown = this.getRiskResultNeedSendList2(riskResultBean);
        logger.info("查询到数据库中需要调用风控接口的数据:{}", JSONObject.toJSONString(riskResultListTown));
        for (RiskResultBean riskResultBeanE : riskResultListTown) {
            try {
                String content = riskResultBeanE.getContent();
                JSONObject parseObject = JSON.parseObject(content);
                Object orderId = parseObject.get("orderId");
                // 添加发送时间
                long time = System.currentTimeMillis();
                SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
                Date date = new Date(time);
                String format = df.format(date);// 当前时间年月日格式
                parseObject.remove("orderId");// 移除参数
                /*
                 * String result =
                 * HttpsClientUtil.getInstance().doPost(riskResultBeanE.getSendUrl(),
                 * parseObject.toJSONString(), "utf-8");// 调用风控接口发送了短信
                 */
                logger.info("正在为风控提交数据,结果订单号为:{}，发送地址为:{}", riskResultBeanE.getOrderId(), riskResultBeanE.getSendUrl());
                /*
                 * LinkedHashMap result = SendHttpsUtil.postMsg4GetMap(riskResultBeanE.getSendUrl(),
                 * parseObject.toJSONString());
                 */

                String result1 =
                        HttpsClientUtil.getInstance().doPost(
                                riskResultBeanE.getSendUrl(),
                                parseObject.toJSONString(), "utf-8");
                JSONObject result = (JSONObject) JSON.parse(result1);

                logger.info("正在为风控提交数据,结果订单号为:{}，风控处理结果为:{}", riskResultBeanE.getOrderId(), result);
                riskResultBeanE.setStatus(1);
                riskResultBeanE.setOrderId(orderId.toString());
                this.updateRiskResultInfo(riskResultBeanE);
                if (result != null && result.get("code").equals("000000")) {// 成功

                    // 保存对应的信息到inst_localriskinfo表
                    LocalRiskInfoBean localBean = new LocalRiskInfoBean();
                    JSONObject itemJSONObj = JSONObject.parseObject(JSON.toJSONString(result));
                    Object object = itemJSONObj.get("result");
                    String string = object.toString();
                    Map resMap1 = JSONObject.parseObject(string);
                    localBean.setTradeNo(resMap1.get("tradeNo").toString());
                    localBean.setEffect("1");
                    localBean.setReportState("1");
                    localBean.setOrderId(orderId.toString());
                    JSONArray jsonArray = JSON.parseArray(resMap1.get("list").toString());
                    for (int index = 0; index < jsonArray.size(); index++) {
                        // 保存
                        String reportType = jsonArray.getJSONObject(index).getString("reportType");
                        if ("BaseReport".equals(reportType)) {
                            localBean.setReportType("1");
                            localBean.setReportName(jsonArray.getJSONObject(index).getString("reportName"));
                        } else {
                            localBean.setReportType("2");
                            localBean.setReportName(jsonArray.getJSONObject(index).getString("reportName"));
                        }
                        // 同时将库中存在的订单号的数据报告设置为失效
                        this.updateLocalRiskInfo(localBean);
                        // 保存改Bean
                        this.saveReportNo(localBean);

                    }
                } else {
                    LocalRiskInfoBean localBean = new LocalRiskInfoBean();
                    localBean.setOrderId(orderId.toString());
                    localBean.setEffect("1");
                    localBean.setReportState("1");
                    localBean.setErrCode("1");
                    if (result != null) {
                        localBean.setErrMsg(result.get("msg").toString());
                    }
                    // 先将库中存在的订单号的数据报告设置为失效
                    this.updateLocalRiskInfo(localBean);
                    this.saveReportNo(localBean);
                    logger.info("正在处理风控结果订单号为:{}，风控处理结果为:{}", riskResultBeanE.getOrderId(), result.get("msg"));

                }
            } catch (Exception e) {
                logger.error("调用风控出现异常：" + e.getMessage());
            }

        }
    }

    private void updateLocalRiskInfo(LocalRiskInfoBean localBean) {
        setDb(0, super.MASTER);
        riskInfoDao.updateLocalRiskInfo(localBean);
    }

    public static void main(String[] args) {
        /*
         * Map<String, Object> map = JSONObject .parseObject(
         * "{\"appType\":\"weixin\",\"checkInfo\":{\"addDetails\":\"河北省保定市北京\",\"addProvince\":\"河北省保定市北京\",\"bankNo\":\"6226220129347596\",\"contactName1\":\"罗春艳\",\"contactName2\":\"家里\",\"contactPhone1\":\"13522580626\",\"contactPhone2\":\"18701325140\",\"idCard\":\"130623198710212124\",\"marriedStatus\":\"未婚\",\"phone\":\"13522580626\",\"realName\":\"罗春艳\"},\"noticeUrl\":\"http://www.shandianx.com/asset.inst.platform.front/riskNotice\",\"orderInfo\":{\"amount\":\"100000.00\",\"attribute1\":\"测试测试\",\"attribute2\":\"测试测试\",\"engine\":\"kdkk456656\",\"instalmentNo\":\"\",\"instalmentTerms\":\"12\",\"ordeInfo\":\"测试测试\",\"orderId\":\"ASXR2002170627001\",\"organization\":\"iqb\",\"plate\":\"京l12345\",\"plateType\":\"02\",\"thetype\":\"10107\",\"vin\":\"京A123556\"},\"order_handel_flag\":\"test_f\",\"regId\":\"13522580626\",\"source\":\"huahuadata\",\"traceNo\":\"20170627-295676\",\"version\":\"1.0.0\",\"website\":\"\"}"
         * ); logger.info("回调地址:{}", map.get("noticeUrl")); String returnUrl = map.get("noticeUrl")
         * + ""; // String returnUrl = "https://www.zhongezc.com/consumer.manage.front/riskNotice";
         * System.out.println(returnUrl.replaceAll("www\\.shandianx\\.com", "127.0.0.1")); if
         * (returnUrl.contains("consumer.manage.front")) { returnUrl =
         * returnUrl.replaceAll("www\\.shandianx\\.com", "127.0.0.1"); returnUrl =
         * returnUrl.replaceAll("www\\.zhongezc\\.com", "127.0.0.1"); returnUrl =
         * returnUrl.replaceAll("api\\.ishandian\\.cn", "127.0.0.1"); }
         * System.out.println(returnUrl);
         */
        /*
         * long time = System.currentTimeMillis(); SimpleDateFormat df = new
         * SimpleDateFormat("yyyyMMddHHmmss"); Date date = new Date(time); String format =
         * df.format(date);// 当前时间年月日格式 System.out.println(format);
         */

        /*
         * String str =
         * "{result={tradeNo=3191cb3e13884fa4a15196aaa8019e1c, list=[{reportType=BaseReport, reportName=个人风险分析报告}, {reportType=FraudReport, reportName=贷前反欺诈报告}]}, code=000000} "
         * ; Object parse = JSONObject.parse(str); JSONObject itemJSONObj =
         * JSONObject.parseObject(JSON.toJSONString(itemMap)); System.out.println(parse.toString());
         */

        /*
         * SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss"); String format =
         * df.format("2018-04-02 17:10:00"); System.out.println(format);
         */
        String str =
                "{\"customerCode\":\"0003\",\"datasendTime\":\"20180410145738\"}";
        String result1 =
                HttpsClientUtil.getInstance().doPost(
                        "https://risk.zhongezc.cn/platform-risk-web/api/report/submitRiskInfo",
                        str, "utf-8");
        LinkedHashMap result2 =
                SendHttpsUtil.postMsg4GetMap("https://risk.zhongezc.cn/platform-risk-web/api/report/submitRiskInfo",
                        str);
        JSONObject result = (JSONObject) JSON.parse(result1);
        System.out.println(result2);
        System.out.println(result);
        /*
         * SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss"); String format =
         * df.format("2018-04-02 17:10:00"); System.out.println(format);
         */
        String ss =
                "{\"customerCode\":\"0003\",\"datasendTime\":\"20180403114530\"}";
        // String str =
        // "{\"customerCode\":\"0003\",\"datasendTime\":\"20180403141454\"}";
        Map<String, String> params2 = new HashMap<String, String>();
        params2.put("orderId", "1111");
        /*
         * LinkedHashMap result = SendHttpsUtil.postMsg4GetMap(
         * "http://risk.zhongezc.com/platform-risk-web/api/report/submitRiskInfo",str);
         */
        System.out.println(result);
        // Map params = new HashMap();
        /* 71 *//*
                 * params.put("customerCode", "0003"); 72 params.put("data",
                 * "9549BDEB0C9095567C26D128B8ED19F783E593251FF0169EAEAF0F2CEE3A64AEBA14439E0E163ADD3579366240B2FEF76AD15B7DB2F40499F5ED006C0496897DF63D8199BF4E79145C2FA6615E645EEEA7036DF2E89506704FF9713F3CE4697A2C48AC2F3A36270E73F222403C4BA124FDD5CE8FC99C94EDA2138A37D6B56A8DE8779BDC0134CE9B8196F81C1AC3A6DC0975E7DC954029982F4729043FD57C8069117FA127295D4C4BB4B529907D4994BD9D3C86A5447B3829C1C0CE47139CAF5C2FA6615E645EEE182535EF04DB5F46412282D22B558163EDBA35C84EB48DCE0975E7DC9540299858DCA1AB7891500333BE80CA4F7FBAEABDCA06AD2DD712EF98FD12C03B95E28FF2054A91D4F505B8368088DAAC8C6F7E388C22E1FCDA321041120D3673BE3CC90975E7DC954029985E0625911A6DBE6E8F8DBF3ADA04B17798F521407B2A6832F2054A91D4F505B8368088DAAC8C6F7E388C22E1FCDA32103D4FCA53D7BD17F80975E7DC9540299858DCA1AB789150034E2BB7B2A3363C596A6B8173D9B69A9233D7782547210F3183D79850AAC7B5817319B0649AD972F836F62A50D0C0D9CCE3F93EAF219E503EAC9786D9D30A45203AF3D2485C336B73D0FDA5297915CF695B4512045BE89235B0AC5B69DF8727F30975E7DC9540299858DCA1AB789150034E2BB7B2A3363C59F6B132846AD8C54598FD12C03B95E28FF2054A91D4F505B8368088DAAC8C6F7E5BDB64AEFBDCAA09B2B22C1CCA2AFEF70975E7DC9540299858DCA1AB789150034E2BB7B2A3363C595E1F8D6D7B80C8F798FD12C03B95E28FF2054A91D4F505B8368088DAAC8C6F7E388C22E1FCDA32105590CA2265501B970975E7DC9540299858AB87909041EF79088CEE5F846BB3BC2E89624505D1FBC8FAE12AF4107FB27458DCA1AB7891500333BE80CA4F7FBAEAC6620ECE717F3B0898FD12C03B95E28F9032C7CE6D20789F0B29CA22FC5901C989719F18B60231BD1079AD74DB09BD7624E373C606E2E76E7069345C49C3EEE20D119FD52B09A8BE982C3E1C3E638209F7050DCB69CF3489B2C05EF38ECE9FDD48B0747B64261A463A7BC7F383E014E8E2917EB41D546820A903905F667756592B1CD36622B92B2F58C7BB34DE95868A601CE4C8EAACF24E07415BF6B3B6B87B0894040E9F9895D9F597697AFEADBBCE0FB440CC7F3DF265C86B653B2CD1A2D798FD12C03B95E28FAB96416431F2722AB272F7CE6FB0EE79582D9A0300CEC08373F222403C4BA1247023127ED46D2AB589C82AE026748EAB59978EB2A98BF01E9032C7CE6D20789FA371A40BCC89F5F95FE8E7D0F34A6DE773F222403C4BA124BD9D3C86A5447B38D3E39B79BA093A32EE3495DD3DA44A90FDDDD2E11849B19A12ECA3B12AC73A66EDE6E2C9C53637AD330F33601A261EA05C2FA6615E645EEE30BF64771649BC3D230098BFF6B80B5373F222403C4BA12434974F47ED84C15ABD9D3C86A5447B38F3A9BC83A2E4AEA0FFEA5B90871BDEAD9DF262183CAEB0274FF9713F3CE4697A6085FB7131B41EE2AC9786D9D30A45209FF06B8FB6015C96EE36C4F64353D6F598FD12C03B95E28FF2054A91D4F505B877565790AD8E409BFD00CBFABBFB212E415BA5F0C186C2E8F5ED006C0496897D879892D28F5AB76798FD12C03B95E28FF2054A91D4F505B81F4E374985BBE505144D783DBA575E26E15C664DE4B915E370EED91FF5DFB6E40BBC415E7ED13F8A4FF9713F3CE4697A6085FB7131B41EE298FD12C03B95E28F485E29E857B00A383151E9B59673C66773F222403C4BA124DD5D573E334E7F52DC426EA814668E3B9D3CB66A34453AA465E320417BFC0B45C5CA925686146FEF0975E7DC9540299813B6774597045D85C197966B2274320F4F2186679C11F3600975E7DC9540299858DCA1AB78915003AEF84A2EA22E629AB83E66F50B941295317CD808B436740698FD12C03B95E28FA2D790F711169F55EA0141A71234B2F593D11BAAA328796E98FD12C03B95E28FF2054A91D4F505B8368088DAAC8C6F7EE2616A9099C83E34A9E2ED0C7CC1679FE7CC8D4DB1E2DB4A0975E7DC9540299858DCA1AB78915003AEF84A2EA22E629AB83E66F50B941295BF3083DDB4352235828767AAF081069A5F01C223346591C058DCA1AB78915003AEF84A2EA22E629AB83E66F50B9412958598FAF3C2B712D898FD12C03B95E28FF2054A91D4F505B8368088DAAC8C6F7EE2616A9099C83E34A9E2ED0C7CC1679F958E467071B06B205AA5D50947139CBFF98138FBBD82144AB1D543B19A31E1AD874E4CB3329C620E5C2FA6615E645EEE1494C7C239ADAF6FB97FEB7B2C5DF39BB1581955BF7312423244E0044839F1400975E7DC954029988CCAC3C3C8C85740D5C4135FDC551713F05D2E2B7B0AB7ABE22FC2FEB3B3216FE15C664DE4B915E370EED91FF5DFB6E43EAD56DC4F3C30F7230CD893A79FFD931360B45EA6BB59DA98FD12C03B95E28FAB96416431F2722A8196F81C1AC3A6DC50D4518DC1E79F4B2537EE7C9F8BF462862DB21B696505072358D15E16DE8041F0A4B57002ECA681F2054A91D4F505B877565790AD8E409BFD00CBFABBFB212EE3F93EAF219E503EAC9786D9D30A4520BD9D3C86A5447B38F3A9BC83A2E4AEA0FFEA5B90871BDEADAE5E10956690F50136DEBE894F8D7D6B0975E7DC95402998B2CAD6A4F9CC0EA71452628E858EB89DBE4706AF6704858D5C2FA6615E645EEE4FFD4860469197012C111E85A072DA28ECD1C0FF2A9D7F49002387D819DB3AF72900234A7173ED5966D64B6CE0DCF5E494F74EFD4E0AE3F6B6891FE85FFBDE7E6C587E5881C583A7A861DCA2D53E70A9816786EF9CB0DFA94CF2C4FD3F3CB40AA9A4A1D7C0F27D4A309470B40B8A6DC344B2B35B97CDBEB09AE87CC721D450374EB1E6AF64ECC9E80115A08ADCE89DAA896C0268335B663E6C25E534455F634D341797CDCEE9BE75B3BFB8BB424D2B470EA6C245CE35EDAA07217AB143B0C8B1840B6B581B6EDB3E1494C7C239ADAF6F304E8592F4FDC97F8ECE9C3B3A790F9C73F222403C4BA124FDD5CE8FC99C94EDDF03DA026342D18F99D881CE524C090B7FBCDC2EE6D0ECC93A66A9DFE3B3FBB523C9A2A30E34759E31E03ECFD91301DC0005D2F98AB2835026B238AE2E5902435C2FA6615E645EEE63C2CC1469D3D4D20ED2078DA96A9BF1336CA1DE38F36F600975E7DC95402998293ABF3CBC3178B0424E929491DA44A4E5E92D961A17736F6130A145DDDFB1B45C2FA6615E645EEE7319B0649AD972F836F62A50D0C0D9CCA1C346E6DEBDEE21433B6A0AEF2C2CEDFEB6099658FB02D4F041B3F28D2423980F32FEF1DF43F3CEE7AE60694FD0EC76B80990DFC82012CE46B2485A92D30C5A8196F81C1AC3A6DC0975E7DC95402998293ABF3CBC3178B0424E929491DA44A4E5E92D961A17736FB7EFCAACCDBFA2505C2FA6615E645EEED20DAF9F4D1DEDAD87BE1921DF4976CC3418D91EDD20FBD4B1581955BF7312424B2FBD92ABC27B465C2FA6615E645EEED20DAF9F4D1DEDAD87BE1921DF4976CC3418D91EDD20FBD4B1581955BF73124251973E5C21BA1DB55C2FA6615E645EEED01D506066FB576D2E56EBB951DEA519D13C90DA573A631E372AF997CC3BF78D5C2FA6615E645EEED20DAF9F4D1DEDAD87BE1921DF4976CCA7C0A3F81F227E5EBDCA06AD2DD712EF98FD12C03B95E28FCB2EBCC5FC06822F691AD871FBDB5FD498FD12C03B95E28FF2054A91D4F505B877565790AD8E409BFD00CBFABBFB212EA1C346E6DEBDEE21433B6A0AEF2C2CED5C2FA6615E645EEED20DAF9F4D1DEDAD87BE1921DF4976CCD83E71DCF31389A28ECE9C3B3A790F9CB4AFACCA833B47520975E7DC9540299858DCA1AB78915003120032AEA3E7F6388ECE9C3B3A790F9CB4AFACCA833B4752243E7C8FEAA20D7409AE2120B39B9C34A9F758D91CE43D8BBD9D3C86A5447B38B1581955BF73124242A5FD5F6E01C412C5CA925686146FEF0975E7DC9540299858DCA1AB78915003120032AEA3E7F6388ECE9C3B3A790F9C1B37CD142AD146DA0975E7DC9540299858DCA1AB78915003120032AEA3E7F6388ECE9C3B3A790F9CB2B22C1CCA2AFEF70975E7DC9540299858DCA1AB78915003120032AEA3E7F6388ECE9C3B3A790F9C67844768D5910E9E0975E7DC9540299813B6774597045D852D0401170C6F72402E89624505D1FBC8ED716E0686754F309E29F766F0F36665AF5B35822201CAF299A246DBC1131280B78D21644421C7650975E7DC95402998293ABF3CBC3178B0424E929491DA44A463D444097073134C99C044362D3C73265C2FA6615E645EEE60848A0649E693179DA0F43684FEDD92C3045F0F36AA593D059D10FD1868C13A691F4CBEC8EA4E09DC2418BB1FD1408110952F8D88CE496D82B93DFFD7FFA28498FD12C03B95E28FBEEE4F24234332D3"
                 * ); 72 params.put("sendTime","20180403114530");
                 */
        // String httpPost =
        // SimpleHttpUtils.httpPost("https://risk.zhongezc.cn/platform-risk-web/api/report/submitRiskInfo",params);
        // System.out.println(httpPost);

    }

}
